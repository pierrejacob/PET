// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// rmvnorm_
NumericMatrix rmvnorm_(int nsamples, const NumericVector& mean, const NumericMatrix& covariance);
RcppExport SEXP _PET_rmvnorm_(SEXP nsamplesSEXP, SEXP meanSEXP, SEXP covarianceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type nsamples(nsamplesSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type covariance(covarianceSEXP);
    rcpp_result_gen = Rcpp::wrap(rmvnorm_(nsamples, mean, covariance));
    return rcpp_result_gen;
END_RCPP
}
// rmvnorm_cholesky_
NumericMatrix rmvnorm_cholesky_(int nsamples, const NumericVector& mean, const Eigen::MatrixXd& cholesky);
RcppExport SEXP _PET_rmvnorm_cholesky_(SEXP nsamplesSEXP, SEXP meanSEXP, SEXP choleskySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type nsamples(nsamplesSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type cholesky(choleskySEXP);
    rcpp_result_gen = Rcpp::wrap(rmvnorm_cholesky_(nsamples, mean, cholesky));
    return rcpp_result_gen;
END_RCPP
}
// dmvnorm_
NumericVector dmvnorm_(const NumericMatrix& x, const NumericVector& mean, const NumericMatrix& covariance);
RcppExport SEXP _PET_dmvnorm_(SEXP xSEXP, SEXP meanSEXP, SEXP covarianceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type covariance(covarianceSEXP);
    rcpp_result_gen = Rcpp::wrap(dmvnorm_(x, mean, covariance));
    return rcpp_result_gen;
END_RCPP
}
// dmvnorm_cholesky_inverse_
NumericVector dmvnorm_cholesky_inverse_(const NumericMatrix& x, const NumericVector& mean, const Eigen::MatrixXd& cholesky_inverse);
RcppExport SEXP _PET_dmvnorm_cholesky_inverse_(SEXP xSEXP, SEXP meanSEXP, SEXP cholesky_inverseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type cholesky_inverse(cholesky_inverseSEXP);
    rcpp_result_gen = Rcpp::wrap(dmvnorm_cholesky_inverse_(x, mean, cholesky_inverse));
    return rcpp_result_gen;
END_RCPP
}
// systematic_resampling_
IntegerVector systematic_resampling_(int nsamples, const NumericVector& weights);
RcppExport SEXP _PET_systematic_resampling_(SEXP nsamplesSEXP, SEXP weightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type nsamples(nsamplesSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type weights(weightsSEXP);
    rcpp_result_gen = Rcpp::wrap(systematic_resampling_(nsamples, weights));
    return rcpp_result_gen;
END_RCPP
}
// multinomial_resampling_
IntegerVector multinomial_resampling_(int nsamples, const NumericVector& weights);
RcppExport SEXP _PET_multinomial_resampling_(SEXP nsamplesSEXP, SEXP weightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type nsamples(nsamplesSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type weights(weightsSEXP);
    rcpp_result_gen = Rcpp::wrap(multinomial_resampling_(nsamples, weights));
    return rcpp_result_gen;
END_RCPP
}

RcppExport SEXP _rcpp_module_boot_module_tree();

static const R_CallMethodDef CallEntries[] = {
    {"_PET_rmvnorm_", (DL_FUNC) &_PET_rmvnorm_, 3},
    {"_PET_rmvnorm_cholesky_", (DL_FUNC) &_PET_rmvnorm_cholesky_, 3},
    {"_PET_dmvnorm_", (DL_FUNC) &_PET_dmvnorm_, 3},
    {"_PET_dmvnorm_cholesky_inverse_", (DL_FUNC) &_PET_dmvnorm_cholesky_inverse_, 3},
    {"_PET_systematic_resampling_", (DL_FUNC) &_PET_systematic_resampling_, 2},
    {"_PET_multinomial_resampling_", (DL_FUNC) &_PET_multinomial_resampling_, 2},
    {"_rcpp_module_boot_module_tree", (DL_FUNC) &_rcpp_module_boot_module_tree, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_PET(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
